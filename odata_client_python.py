# OData Python Client and Server Libraries ver. 1.0.0

# Copyright (c) Microsoft Corporation
# All rights reserved. 

# MIT License

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_odata_client_python', [dirname(__file__)])
        except ImportError:
            import _odata_client_python
            return _odata_client_python
        if fp is not None:
            try:
                _mod = imp.load_module('_odata_client_python', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _odata_client_python = swig_import_helper()
    del swig_import_helper
else:
    import _odata_client_python
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _odata_client_python.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _odata_client_python.SwigPyIterator_value(self)
    def incr(self, n=1): return _odata_client_python.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _odata_client_python.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _odata_client_python.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _odata_client_python.SwigPyIterator_equal(self, *args)
    def copy(self): return _odata_client_python.SwigPyIterator_copy(self)
    def next(self): return _odata_client_python.SwigPyIterator_next(self)
    def __next__(self): return _odata_client_python.SwigPyIterator___next__(self)
    def previous(self): return _odata_client_python.SwigPyIterator_previous(self)
    def advance(self, *args): return _odata_client_python.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _odata_client_python.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _odata_client_python.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _odata_client_python.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _odata_client_python.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _odata_client_python.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _odata_client_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _odata_client_python.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _odata_client_python.SHARED_PTR_DISOWN
class datetime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, datetime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, datetime, name)
    __repr__ = _swig_repr
    RFC_1123 = _odata_client_python.datetime_RFC_1123
    ISO_8601 = _odata_client_python.datetime_ISO_8601
    __swig_getmethods__["utc_now"] = lambda x: _odata_client_python.datetime_utc_now
    if _newclass:utc_now = staticmethod(_odata_client_python.datetime_utc_now)
    __swig_getmethods__["from_string"] = lambda x: _odata_client_python.datetime_from_string
    if _newclass:from_string = staticmethod(_odata_client_python.datetime_from_string)
    def to_string(self, *args): return _odata_client_python.datetime_to_string(self, *args)
    def __init__(self): 
        this = _odata_client_python.new_datetime()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_datetime
    __del__ = lambda self : None;
datetime_swigregister = _odata_client_python.datetime_swigregister
datetime_swigregister(datetime)

def datetime_utc_now():
  return _odata_client_python.datetime_utc_now()
datetime_utc_now = _odata_client_python.datetime_utc_now

def datetime_from_string(*args):
  return _odata_client_python.datetime_from_string(*args)
datetime_from_string = _odata_client_python.datetime_from_string

class seconds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seconds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seconds, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_seconds(*args)
        try: self.this.append(this)
        except: self.this = this
    def count(self): return _odata_client_python.seconds_count(self)
    __swig_destroy__ = _odata_client_python.delete_seconds
    __del__ = lambda self : None;
seconds_swigregister = _odata_client_python.seconds_swigregister
seconds_swigregister(seconds)

undefined_value = _odata_client_python.undefined_value
_None = _odata_client_python._None
Primitive = _odata_client_python.Primitive
Entity = _odata_client_python.Entity
Complex = _odata_client_python.Complex
Collection = _odata_client_python.Collection
Enum = _odata_client_python.Enum
Link = _odata_client_python.Link
Navigation = _odata_client_python.Navigation
Operation = _odata_client_python.Operation
PayloadAnnotation = _odata_client_python.PayloadAnnotation
Unknown = _odata_client_python.Unknown
NoneVal = _odata_client_python.NoneVal
Binary = _odata_client_python.Binary
Boolean = _odata_client_python.Boolean
Byte = _odata_client_python.Byte
DateTimeOffset = _odata_client_python.DateTimeOffset
Duration = _odata_client_python.Duration
Decimal = _odata_client_python.Decimal
Double = _odata_client_python.Double
Guid = _odata_client_python.Guid
Int16 = _odata_client_python.Int16
Int32 = _odata_client_python.Int32
Int64 = _odata_client_python.Int64
SByte = _odata_client_python.SByte
Single = _odata_client_python.Single
String = _odata_client_python.String
Stream = _odata_client_python.Stream
class edm_named_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_named_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_named_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_named_type(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_named_type
    __del__ = lambda self : None;
    def get_name(self): return _odata_client_python.edm_named_type_get_name(self)
    def get_full_name(self): return _odata_client_python.edm_named_type_get_full_name(self)
    def set_name(self, *args): return _odata_client_python.edm_named_type_set_name(self, *args)
    def get_namespace(self): return _odata_client_python.edm_named_type_get_namespace(self)
    def set_namespace(self, *args): return _odata_client_python.edm_named_type_set_namespace(self, *args)
    def get_type_kind(self): return _odata_client_python.edm_named_type_get_type_kind(self)
    def set_type_kind(self, *args): return _odata_client_python.edm_named_type_set_type_kind(self, *args)
    __swig_getmethods__["EDM_UNKNOWN"] = lambda x: _odata_client_python.edm_named_type_EDM_UNKNOWN
    if _newclass:EDM_UNKNOWN = staticmethod(_odata_client_python.edm_named_type_EDM_UNKNOWN)
edm_named_type_swigregister = _odata_client_python.edm_named_type_swigregister
edm_named_type_swigregister(edm_named_type)

def edm_named_type_EDM_UNKNOWN():
  return _odata_client_python.edm_named_type_EDM_UNKNOWN()
edm_named_type_EDM_UNKNOWN = _odata_client_python.edm_named_type_EDM_UNKNOWN

class edm_primitive_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_primitive_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_primitive_type, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def get_primitive_kind(self): return _odata_client_python.edm_primitive_type_get_primitive_kind(self)
    def type_equal(self, *args): return _odata_client_python.edm_primitive_type_type_equal(self, *args)
    __swig_getmethods__["BINARY"] = lambda x: _odata_client_python.edm_primitive_type_BINARY
    if _newclass:BINARY = staticmethod(_odata_client_python.edm_primitive_type_BINARY)
    __swig_getmethods__["BOOLEAN"] = lambda x: _odata_client_python.edm_primitive_type_BOOLEAN
    if _newclass:BOOLEAN = staticmethod(_odata_client_python.edm_primitive_type_BOOLEAN)
    __swig_getmethods__["BYTE"] = lambda x: _odata_client_python.edm_primitive_type_BYTE
    if _newclass:BYTE = staticmethod(_odata_client_python.edm_primitive_type_BYTE)
    __swig_getmethods__["DATETIMEOFFSET"] = lambda x: _odata_client_python.edm_primitive_type_DATETIMEOFFSET
    if _newclass:DATETIMEOFFSET = staticmethod(_odata_client_python.edm_primitive_type_DATETIMEOFFSET)
    __swig_getmethods__["DURATION"] = lambda x: _odata_client_python.edm_primitive_type_DURATION
    if _newclass:DURATION = staticmethod(_odata_client_python.edm_primitive_type_DURATION)
    __swig_getmethods__["DECIMAL"] = lambda x: _odata_client_python.edm_primitive_type_DECIMAL
    if _newclass:DECIMAL = staticmethod(_odata_client_python.edm_primitive_type_DECIMAL)
    __swig_getmethods__["DOUBLE"] = lambda x: _odata_client_python.edm_primitive_type_DOUBLE
    if _newclass:DOUBLE = staticmethod(_odata_client_python.edm_primitive_type_DOUBLE)
    __swig_getmethods__["GUID"] = lambda x: _odata_client_python.edm_primitive_type_GUID
    if _newclass:GUID = staticmethod(_odata_client_python.edm_primitive_type_GUID)
    __swig_getmethods__["INT16"] = lambda x: _odata_client_python.edm_primitive_type_INT16
    if _newclass:INT16 = staticmethod(_odata_client_python.edm_primitive_type_INT16)
    __swig_getmethods__["INT32"] = lambda x: _odata_client_python.edm_primitive_type_INT32
    if _newclass:INT32 = staticmethod(_odata_client_python.edm_primitive_type_INT32)
    __swig_getmethods__["INT64"] = lambda x: _odata_client_python.edm_primitive_type_INT64
    if _newclass:INT64 = staticmethod(_odata_client_python.edm_primitive_type_INT64)
    __swig_getmethods__["SBYTE"] = lambda x: _odata_client_python.edm_primitive_type_SBYTE
    if _newclass:SBYTE = staticmethod(_odata_client_python.edm_primitive_type_SBYTE)
    __swig_getmethods__["SINGLE"] = lambda x: _odata_client_python.edm_primitive_type_SINGLE
    if _newclass:SINGLE = staticmethod(_odata_client_python.edm_primitive_type_SINGLE)
    __swig_getmethods__["STRING"] = lambda x: _odata_client_python.edm_primitive_type_STRING
    if _newclass:STRING = staticmethod(_odata_client_python.edm_primitive_type_STRING)
    __swig_getmethods__["STREAM"] = lambda x: _odata_client_python.edm_primitive_type_STREAM
    if _newclass:STREAM = staticmethod(_odata_client_python.edm_primitive_type_STREAM)
    __swig_getmethods__["UNKNOWN"] = lambda x: _odata_client_python.edm_primitive_type_UNKNOWN
    if _newclass:UNKNOWN = staticmethod(_odata_client_python.edm_primitive_type_UNKNOWN)
    __swig_destroy__ = _odata_client_python.delete_edm_primitive_type
    __del__ = lambda self : None;
edm_primitive_type_swigregister = _odata_client_python.edm_primitive_type_swigregister
edm_primitive_type_swigregister(edm_primitive_type)

def edm_primitive_type_BINARY():
  return _odata_client_python.edm_primitive_type_BINARY()
edm_primitive_type_BINARY = _odata_client_python.edm_primitive_type_BINARY

def edm_primitive_type_BOOLEAN():
  return _odata_client_python.edm_primitive_type_BOOLEAN()
edm_primitive_type_BOOLEAN = _odata_client_python.edm_primitive_type_BOOLEAN

def edm_primitive_type_BYTE():
  return _odata_client_python.edm_primitive_type_BYTE()
edm_primitive_type_BYTE = _odata_client_python.edm_primitive_type_BYTE

def edm_primitive_type_DATETIMEOFFSET():
  return _odata_client_python.edm_primitive_type_DATETIMEOFFSET()
edm_primitive_type_DATETIMEOFFSET = _odata_client_python.edm_primitive_type_DATETIMEOFFSET

def edm_primitive_type_DURATION():
  return _odata_client_python.edm_primitive_type_DURATION()
edm_primitive_type_DURATION = _odata_client_python.edm_primitive_type_DURATION

def edm_primitive_type_DECIMAL():
  return _odata_client_python.edm_primitive_type_DECIMAL()
edm_primitive_type_DECIMAL = _odata_client_python.edm_primitive_type_DECIMAL

def edm_primitive_type_DOUBLE():
  return _odata_client_python.edm_primitive_type_DOUBLE()
edm_primitive_type_DOUBLE = _odata_client_python.edm_primitive_type_DOUBLE

def edm_primitive_type_GUID():
  return _odata_client_python.edm_primitive_type_GUID()
edm_primitive_type_GUID = _odata_client_python.edm_primitive_type_GUID

def edm_primitive_type_INT16():
  return _odata_client_python.edm_primitive_type_INT16()
edm_primitive_type_INT16 = _odata_client_python.edm_primitive_type_INT16

def edm_primitive_type_INT32():
  return _odata_client_python.edm_primitive_type_INT32()
edm_primitive_type_INT32 = _odata_client_python.edm_primitive_type_INT32

def edm_primitive_type_INT64():
  return _odata_client_python.edm_primitive_type_INT64()
edm_primitive_type_INT64 = _odata_client_python.edm_primitive_type_INT64

def edm_primitive_type_SBYTE():
  return _odata_client_python.edm_primitive_type_SBYTE()
edm_primitive_type_SBYTE = _odata_client_python.edm_primitive_type_SBYTE

def edm_primitive_type_SINGLE():
  return _odata_client_python.edm_primitive_type_SINGLE()
edm_primitive_type_SINGLE = _odata_client_python.edm_primitive_type_SINGLE

def edm_primitive_type_STRING():
  return _odata_client_python.edm_primitive_type_STRING()
edm_primitive_type_STRING = _odata_client_python.edm_primitive_type_STRING

def edm_primitive_type_STREAM():
  return _odata_client_python.edm_primitive_type_STREAM()
edm_primitive_type_STREAM = _odata_client_python.edm_primitive_type_STREAM

def edm_primitive_type_UNKNOWN():
  return _odata_client_python.edm_primitive_type_UNKNOWN()
edm_primitive_type_UNKNOWN = _odata_client_python.edm_primitive_type_UNKNOWN

class edm_property_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_property_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_property_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_property_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _odata_client_python.edm_property_type_get_name(self)
    def is_nullable(self): return _odata_client_python.edm_property_type_is_nullable(self)
    def get_property_type(self): return _odata_client_python.edm_property_type_get_property_type(self)
    def set_property_type(self, *args): return _odata_client_python.edm_property_type_set_property_type(self, *args)
    def set_precision(self, *args): return _odata_client_python.edm_property_type_set_precision(self, *args)
    def default_value(self): return _odata_client_python.edm_property_type_default_value(self)
    __swig_destroy__ = _odata_client_python.delete_edm_property_type
    __del__ = lambda self : None;
edm_property_type_swigregister = _odata_client_python.edm_property_type_swigregister
edm_property_type_swigregister(edm_property_type)

class edm_collection_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_collection_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_collection_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_collection_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_element_type(self): return _odata_client_python.edm_collection_type_get_element_type(self)
    def set_element_type(self, *args): return _odata_client_python.edm_collection_type_set_element_type(self, *args)
    __swig_destroy__ = _odata_client_python.delete_edm_collection_type
    __del__ = lambda self : None;
edm_collection_type_swigregister = _odata_client_python.edm_collection_type_swigregister
edm_collection_type_swigregister(edm_collection_type)

class edm_payload_annotation_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_payload_annotation_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_payload_annotation_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_payload_annotation_type(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_payload_annotation_type
    __del__ = lambda self : None;
edm_payload_annotation_type_swigregister = _odata_client_python.edm_payload_annotation_type_swigregister
edm_payload_annotation_type_swigregister(edm_payload_annotation_type)

class edm_structured_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_structured_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_structured_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_structured_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_property(self, *args): return _odata_client_python.edm_structured_type_add_property(self, *args)
    def begin(self): return _odata_client_python.edm_structured_type_begin(self)
    def end(self): return _odata_client_python.edm_structured_type_end(self)
    def get_base_type_name(self): return _odata_client_python.edm_structured_type_get_base_type_name(self)
    def set_base_type(self, *args): return _odata_client_python.edm_structured_type_set_base_type(self, *args)
    def get_base_type(self): return _odata_client_python.edm_structured_type_get_base_type(self)
    def find_property(self, *args): return _odata_client_python.edm_structured_type_find_property(self, *args)
    def get_properties_vector(self): return _odata_client_python.edm_structured_type_get_properties_vector(self)
    __swig_destroy__ = _odata_client_python.delete_edm_structured_type
    __del__ = lambda self : None;
edm_structured_type_swigregister = _odata_client_python.edm_structured_type_swigregister
edm_structured_type_swigregister(edm_structured_type)

class edm_enum_member(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_enum_member, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_enum_member, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_enum_member(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_enum_member_name(self): return _odata_client_python.edm_enum_member_get_enum_member_name(self)
    def set_enum_member_name(self, *args): return _odata_client_python.edm_enum_member_set_enum_member_name(self, *args)
    def get_enum_member_value(self): return _odata_client_python.edm_enum_member_get_enum_member_value(self)
    def set_enum_member_value(self, *args): return _odata_client_python.edm_enum_member_set_enum_member_value(self, *args)
    __swig_destroy__ = _odata_client_python.delete_edm_enum_member
    __del__ = lambda self : None;
edm_enum_member_swigregister = _odata_client_python.edm_enum_member_swigregister
edm_enum_member_swigregister(edm_enum_member)

class edm_enum_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_enum_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_enum_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_enum_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_enum_member(self, *args): return _odata_client_python.edm_enum_type_add_enum_member(self, *args)
    def get_enum_members(self): return _odata_client_python.edm_enum_type_get_enum_members(self)
    def is_flag(self): return _odata_client_python.edm_enum_type_is_flag(self)
    __swig_destroy__ = _odata_client_python.delete_edm_enum_type
    __del__ = lambda self : None;
edm_enum_type_swigregister = _odata_client_python.edm_enum_type_swigregister
edm_enum_type_swigregister(edm_enum_type)

class edm_complex_type(edm_structured_type):
    __swig_setmethods__ = {}
    for _s in [edm_structured_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_complex_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_structured_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_complex_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_complex_type(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_complex_type
    __del__ = lambda self : None;
edm_complex_type_swigregister = _odata_client_python.edm_complex_type_swigregister
edm_complex_type_swigregister(edm_complex_type)

class edm_navigation_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_navigation_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_navigation_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_navigation_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_navigation_type(self): return _odata_client_python.edm_navigation_type_get_navigation_type(self)
    def set_navigation_type(self, *args): return _odata_client_python.edm_navigation_type_set_navigation_type(self, *args)
    def get_binded_navigation_source(self): return _odata_client_python.edm_navigation_type_get_binded_navigation_source(self)
    def set_binded_navigation_source(self, *args): return _odata_client_python.edm_navigation_type_set_binded_navigation_source(self, *args)
    def is_contained(self): return _odata_client_python.edm_navigation_type_is_contained(self)
    __swig_destroy__ = _odata_client_python.delete_edm_navigation_type
    __del__ = lambda self : None;
edm_navigation_type_swigregister = _odata_client_python.edm_navigation_type_swigregister
edm_navigation_type_swigregister(edm_navigation_type)

Action = _odata_client_python.Action
Function = _odata_client_python.Function
class edm_operation_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_operation_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_operation_parameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_operation_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_param_type(self): return _odata_client_python.edm_operation_parameter_get_param_type(self)
    def set_param_type(self, *args): return _odata_client_python.edm_operation_parameter_set_param_type(self, *args)
    def get_param_name(self): return _odata_client_python.edm_operation_parameter_get_param_name(self)
    __swig_destroy__ = _odata_client_python.delete_edm_operation_parameter
    __del__ = lambda self : None;
edm_operation_parameter_swigregister = _odata_client_python.edm_operation_parameter_swigregister
edm_operation_parameter_swigregister(edm_operation_parameter)

class edm_operation_type(edm_named_type):
    __swig_setmethods__ = {}
    for _s in [edm_named_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_operation_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_named_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_operation_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_operation_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_operation_parameter(self, *args): return _odata_client_python.edm_operation_type_add_operation_parameter(self, *args)
    def set_return_type(self, *args): return _odata_client_python.edm_operation_type_set_return_type(self, *args)
    def get_operation_parameters(self): return _odata_client_python.edm_operation_type_get_operation_parameters(self)
    def set_return_type_name(self, *args): return _odata_client_python.edm_operation_type_set_return_type_name(self, *args)
    def get_return_type_name(self): return _odata_client_python.edm_operation_type_get_return_type_name(self)
    def get_operation_return_type(self): return _odata_client_python.edm_operation_type_get_operation_return_type(self)
    def is_bound(self): return _odata_client_python.edm_operation_type_is_bound(self)
    def is_function(self): return _odata_client_python.edm_operation_type_is_function(self)
    __swig_destroy__ = _odata_client_python.delete_edm_operation_type
    __del__ = lambda self : None;
edm_operation_type_swigregister = _odata_client_python.edm_operation_type_swigregister
edm_operation_type_swigregister(edm_operation_type)

class edm_entity_type(edm_structured_type):
    __swig_setmethods__ = {}
    for _s in [edm_structured_type]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_entity_type, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_structured_type]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_entity_type, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_entity_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_key_property(self, *args): return _odata_client_python.edm_entity_type_add_key_property(self, *args)
    def key(self): return _odata_client_python.edm_entity_type_key(self)
    def get_key_with_parents(self): return _odata_client_python.edm_entity_type_get_key_with_parents(self)
    __swig_destroy__ = _odata_client_python.delete_edm_entity_type
    __del__ = lambda self : None;
edm_entity_type_swigregister = _odata_client_python.edm_entity_type_swigregister
edm_entity_type_swigregister(edm_entity_type)

E_RESOURCE_ENTITY_SET = _odata_client_python.E_RESOURCE_ENTITY_SET
E_RESOURCE_SINGLETON = _odata_client_python.E_RESOURCE_SINGLETON
class edm_navigation_source(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_navigation_source, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_navigation_source, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_navigation_source(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_navigation_source
    __del__ = lambda self : None;
    def add_navigation_source(self, *args): return _odata_client_python.edm_navigation_source_add_navigation_source(self, *args)
    def get_navigation_source_name(self, *args): return _odata_client_python.edm_navigation_source_get_navigation_source_name(self, *args)
    def get_navigation_sources(self): return _odata_client_python.edm_navigation_source_get_navigation_sources(self)
    def get_name(self): return _odata_client_python.edm_navigation_source_get_name(self)
    def get_resource_type(self): return _odata_client_python.edm_navigation_source_get_resource_type(self)
edm_navigation_source_swigregister = _odata_client_python.edm_navigation_source_swigregister
edm_navigation_source_swigregister(edm_navigation_source)

class edm_entity_set(edm_navigation_source):
    __swig_setmethods__ = {}
    for _s in [edm_navigation_source]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_entity_set, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_navigation_source]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_entity_set, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_entity_set(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_entity_type_name(self): return _odata_client_python.edm_entity_set_get_entity_type_name(self)
    def get_entity_type(self): return _odata_client_python.edm_entity_set_get_entity_type(self)
    def set_entity_type(self, *args): return _odata_client_python.edm_entity_set_set_entity_type(self, *args)
    __swig_destroy__ = _odata_client_python.delete_edm_entity_set
    __del__ = lambda self : None;
edm_entity_set_swigregister = _odata_client_python.edm_entity_set_swigregister
edm_entity_set_swigregister(edm_entity_set)

class edm_singleton(edm_navigation_source):
    __swig_setmethods__ = {}
    for _s in [edm_navigation_source]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_singleton, name, value)
    __swig_getmethods__ = {}
    for _s in [edm_navigation_source]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, edm_singleton, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_singleton(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _odata_client_python.edm_singleton_get_name(self)
    def get_entity_type_name(self): return _odata_client_python.edm_singleton_get_entity_type_name(self)
    def get_entity_type(self): return _odata_client_python.edm_singleton_get_entity_type(self)
    def set_entity_type(self, *args): return _odata_client_python.edm_singleton_set_entity_type(self, *args)
    __swig_destroy__ = _odata_client_python.delete_edm_singleton
    __del__ = lambda self : None;
edm_singleton_swigregister = _odata_client_python.edm_singleton_swigregister
edm_singleton_swigregister(edm_singleton)

ActionImport = _odata_client_python.ActionImport
FunctionImport = _odata_client_python.FunctionImport
class edm_operation_import(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_operation_import, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_operation_import, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_operation_import(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _odata_client_python.edm_operation_import_get_name(self)
    def get_operation_type(self): return _odata_client_python.edm_operation_import_get_operation_type(self)
    def set_operation_type(self, *args): return _odata_client_python.edm_operation_import_set_operation_type(self, *args)
    __swig_destroy__ = _odata_client_python.delete_edm_operation_import
    __del__ = lambda self : None;
edm_operation_import_swigregister = _odata_client_python.edm_operation_import_swigregister
edm_operation_import_swigregister(edm_operation_import)

class edm_entity_container(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_entity_container, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_entity_container, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_entity_container(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _odata_client_python.edm_entity_container_get_name(self)
    def is_default_container(self): return _odata_client_python.edm_entity_container_is_default_container(self)
    def add_entity_set(self, *args): return _odata_client_python.edm_entity_container_add_entity_set(self, *args)
    def add_singleton(self, *args): return _odata_client_python.edm_entity_container_add_singleton(self, *args)
    def get_operation_imports(self): return _odata_client_python.edm_entity_container_get_operation_imports(self)
    def get_singletons(self): return _odata_client_python.edm_entity_container_get_singletons(self)
    def add_operation_import(self, *args): return _odata_client_python.edm_entity_container_add_operation_import(self, *args)
    def begin(self): return _odata_client_python.edm_entity_container_begin(self)
    def end(self): return _odata_client_python.edm_entity_container_end(self)
    def find_entity_set(self, *args): return _odata_client_python.edm_entity_container_find_entity_set(self, *args)
    def find_singleton(self, *args): return _odata_client_python.edm_entity_container_find_singleton(self, *args)
    def find_operation_import(self, *args): return _odata_client_python.edm_entity_container_find_operation_import(self, *args)
    def get_operation_import_vector(self): return _odata_client_python.edm_entity_container_get_operation_import_vector(self)
    def get_singleton_vector(self): return _odata_client_python.edm_entity_container_get_singleton_vector(self)
    def get_entity_set_vector(self): return _odata_client_python.edm_entity_container_get_entity_set_vector(self)
    __swig_destroy__ = _odata_client_python.delete_edm_entity_container
    __del__ = lambda self : None;
edm_entity_container_swigregister = _odata_client_python.edm_entity_container_swigregister
edm_entity_container_swigregister(edm_entity_container)

class edm_schema(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_schema, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_schema, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_edm_schema(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_entity_type(self, *args): return _odata_client_python.edm_schema_add_entity_type(self, *args)
    def add_complex_type(self, *args): return _odata_client_python.edm_schema_add_complex_type(self, *args)
    def add_enum_type(self, *args): return _odata_client_python.edm_schema_add_enum_type(self, *args)
    def add_operation_type(self, *args): return _odata_client_python.edm_schema_add_operation_type(self, *args)
    def add_container(self, *args): return _odata_client_python.edm_schema_add_container(self, *args)
    def find_entity_type(self, *args): return _odata_client_python.edm_schema_find_entity_type(self, *args)
    def find_complex_type(self, *args): return _odata_client_python.edm_schema_find_complex_type(self, *args)
    def find_enum_type(self, *args): return _odata_client_python.edm_schema_find_enum_type(self, *args)
    def find_operation_type(self, *args): return _odata_client_python.edm_schema_find_operation_type(self, *args)
    def find_container(self, *args): return _odata_client_python.edm_schema_find_container(self, *args)
    def get_entity_types(self): return _odata_client_python.edm_schema_get_entity_types(self)
    def get_complex_types(self): return _odata_client_python.edm_schema_get_complex_types(self)
    def get_enum_types(self): return _odata_client_python.edm_schema_get_enum_types(self)
    def get_operation_types(self): return _odata_client_python.edm_schema_get_operation_types(self)
    def get_containers(self): return _odata_client_python.edm_schema_get_containers(self)
    def get_name(self): return _odata_client_python.edm_schema_get_name(self)
    def get_entity_types_vector(self): return _odata_client_python.edm_schema_get_entity_types_vector(self)
    def get_complex_types_vector(self): return _odata_client_python.edm_schema_get_complex_types_vector(self)
    def get_enum_types_vector(self): return _odata_client_python.edm_schema_get_enum_types_vector(self)
    def get_operation_types_vector(self): return _odata_client_python.edm_schema_get_operation_types_vector(self)
    def get_containers_vector(self): return _odata_client_python.edm_schema_get_containers_vector(self)
    __swig_destroy__ = _odata_client_python.delete_edm_schema
    __del__ = lambda self : None;
edm_schema_swigregister = _odata_client_python.edm_schema_swigregister
edm_schema_swigregister(edm_schema)

class edm_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_model, name)
    __repr__ = _swig_repr
    def add_schema(self, *args): return _odata_client_python.edm_model_add_schema(self, *args)
    def get_schema(self): return _odata_client_python.edm_model_get_schema(self)
    def get_version(self): return _odata_client_python.edm_model_get_version(self)
    def set_version(self, *args): return _odata_client_python.edm_model_set_version(self, *args)
    def find_entity_type(self, *args): return _odata_client_python.edm_model_find_entity_type(self, *args)
    def find_complex_type(self, *args): return _odata_client_python.edm_model_find_complex_type(self, *args)
    def find_enum_type(self, *args): return _odata_client_python.edm_model_find_enum_type(self, *args)
    def find_operation_type(self, *args): return _odata_client_python.edm_model_find_operation_type(self, *args)
    def find_container(self, *args): return _odata_client_python.edm_model_find_container(self, *args)
    def __init__(self): 
        this = _odata_client_python.new_edm_model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_model
    __del__ = lambda self : None;
edm_model_swigregister = _odata_client_python.edm_model_swigregister
edm_model_swigregister(edm_model)

class edm_model_utility(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, edm_model_utility, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, edm_model_utility, name)
    __repr__ = _swig_repr
    __swig_getmethods__["get_edm_type_from_name"] = lambda x: _odata_client_python.edm_model_utility_get_edm_type_from_name
    if _newclass:get_edm_type_from_name = staticmethod(_odata_client_python.edm_model_utility_get_edm_type_from_name)
    __swig_getmethods__["get_strong_type_name_from_edm_type_name"] = lambda x: _odata_client_python.edm_model_utility_get_strong_type_name_from_edm_type_name
    if _newclass:get_strong_type_name_from_edm_type_name = staticmethod(_odata_client_python.edm_model_utility_get_strong_type_name_from_edm_type_name)
    __swig_getmethods__["get_strong_type_default_value_from_edm_type_name"] = lambda x: _odata_client_python.edm_model_utility_get_strong_type_default_value_from_edm_type_name
    if _newclass:get_strong_type_default_value_from_edm_type_name = staticmethod(_odata_client_python.edm_model_utility_get_strong_type_default_value_from_edm_type_name)
    __swig_getmethods__["get_edm_primitive_type_from_name"] = lambda x: _odata_client_python.edm_model_utility_get_edm_primitive_type_from_name
    if _newclass:get_edm_primitive_type_from_name = staticmethod(_odata_client_python.edm_model_utility_get_edm_primitive_type_from_name)
    __swig_getmethods__["get_type_kind_name_from_edm_type"] = lambda x: _odata_client_python.edm_model_utility_get_type_kind_name_from_edm_type
    if _newclass:get_type_kind_name_from_edm_type = staticmethod(_odata_client_python.edm_model_utility_get_type_kind_name_from_edm_type)
    __swig_getmethods__["get_primitive_kind_from_edm_type"] = lambda x: _odata_client_python.edm_model_utility_get_primitive_kind_from_edm_type
    if _newclass:get_primitive_kind_from_edm_type = staticmethod(_odata_client_python.edm_model_utility_get_primitive_kind_from_edm_type)
    __swig_getmethods__["resolve_edm_types_after_parsing"] = lambda x: _odata_client_python.edm_model_utility_resolve_edm_types_after_parsing
    if _newclass:resolve_edm_types_after_parsing = staticmethod(_odata_client_python.edm_model_utility_resolve_edm_types_after_parsing)
    __swig_getmethods__["get_property_type_from_name"] = lambda x: _odata_client_python.edm_model_utility_get_property_type_from_name
    if _newclass:get_property_type_from_name = staticmethod(_odata_client_python.edm_model_utility_get_property_type_from_name)
    __swig_getmethods__["get_collection_element_type"] = lambda x: _odata_client_python.edm_model_utility_get_collection_element_type
    if _newclass:get_collection_element_type = staticmethod(_odata_client_python.edm_model_utility_get_collection_element_type)
    __swig_getmethods__["get_navigation_element_type"] = lambda x: _odata_client_python.edm_model_utility_get_navigation_element_type
    if _newclass:get_navigation_element_type = staticmethod(_odata_client_python.edm_model_utility_get_navigation_element_type)
    def __init__(self): 
        this = _odata_client_python.new_edm_model_utility()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_edm_model_utility
    __del__ = lambda self : None;
edm_model_utility_swigregister = _odata_client_python.edm_model_utility_swigregister
edm_model_utility_swigregister(edm_model_utility)

def edm_model_utility_get_edm_type_from_name(*args):
  return _odata_client_python.edm_model_utility_get_edm_type_from_name(*args)
edm_model_utility_get_edm_type_from_name = _odata_client_python.edm_model_utility_get_edm_type_from_name

def edm_model_utility_get_strong_type_name_from_edm_type_name(*args):
  return _odata_client_python.edm_model_utility_get_strong_type_name_from_edm_type_name(*args)
edm_model_utility_get_strong_type_name_from_edm_type_name = _odata_client_python.edm_model_utility_get_strong_type_name_from_edm_type_name

def edm_model_utility_get_strong_type_default_value_from_edm_type_name(*args):
  return _odata_client_python.edm_model_utility_get_strong_type_default_value_from_edm_type_name(*args)
edm_model_utility_get_strong_type_default_value_from_edm_type_name = _odata_client_python.edm_model_utility_get_strong_type_default_value_from_edm_type_name

def edm_model_utility_get_edm_primitive_type_from_name(*args):
  return _odata_client_python.edm_model_utility_get_edm_primitive_type_from_name(*args)
edm_model_utility_get_edm_primitive_type_from_name = _odata_client_python.edm_model_utility_get_edm_primitive_type_from_name

def edm_model_utility_get_type_kind_name_from_edm_type(*args):
  return _odata_client_python.edm_model_utility_get_type_kind_name_from_edm_type(*args)
edm_model_utility_get_type_kind_name_from_edm_type = _odata_client_python.edm_model_utility_get_type_kind_name_from_edm_type

def edm_model_utility_get_primitive_kind_from_edm_type(*args):
  return _odata_client_python.edm_model_utility_get_primitive_kind_from_edm_type(*args)
edm_model_utility_get_primitive_kind_from_edm_type = _odata_client_python.edm_model_utility_get_primitive_kind_from_edm_type

def edm_model_utility_resolve_edm_types_after_parsing(*args):
  return _odata_client_python.edm_model_utility_resolve_edm_types_after_parsing(*args)
edm_model_utility_resolve_edm_types_after_parsing = _odata_client_python.edm_model_utility_resolve_edm_types_after_parsing

def edm_model_utility_get_property_type_from_name(*args):
  return _odata_client_python.edm_model_utility_get_property_type_from_name(*args)
edm_model_utility_get_property_type_from_name = _odata_client_python.edm_model_utility_get_property_type_from_name

def edm_model_utility_get_collection_element_type(*args):
  return _odata_client_python.edm_model_utility_get_collection_element_type(*args)
edm_model_utility_get_collection_element_type = _odata_client_python.edm_model_utility_get_collection_element_type

def edm_model_utility_get_navigation_element_type(*args):
  return _odata_client_python.edm_model_utility_get_navigation_element_type(*args)
edm_model_utility_get_navigation_element_type = _odata_client_python.edm_model_utility_get_navigation_element_type

class odata_json_constants(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_json_constants, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_json_constants, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _odata_client_python.new_odata_json_constants()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_odata_json_constants
    __del__ = lambda self : None;
odata_json_constants_swigregister = _odata_client_python.odata_json_constants_swigregister
odata_json_constants_swigregister(odata_json_constants)
cvar = _odata_client_python.cvar
odata_json_constants.PAYLOAD_ANNOTATION_NAVIGATIONLINK = _odata_client_python.cvar.odata_json_constants_PAYLOAD_ANNOTATION_NAVIGATIONLINK
odata_json_constants.PAYLOAD_ANNOTATION_READLINK = _odata_client_python.cvar.odata_json_constants_PAYLOAD_ANNOTATION_READLINK
odata_json_constants.PAYLOAD_ANNOTATION_EDITLINK = _odata_client_python.cvar.odata_json_constants_PAYLOAD_ANNOTATION_EDITLINK
odata_json_constants.PAYLOAD_ANNOTATION_TYPE = _odata_client_python.cvar.odata_json_constants_PAYLOAD_ANNOTATION_TYPE
odata_json_constants.PAYLOAD_ANNOTATION_ID = _odata_client_python.cvar.odata_json_constants_PAYLOAD_ANNOTATION_ID

class odata_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_odata_value
    __del__ = lambda self : None;
    def get_value_type(self): return _odata_client_python.odata_value_get_value_type(self)
    def set_value_type(self, *args): return _odata_client_python.odata_value_set_value_type(self, *args)
odata_value_swigregister = _odata_client_python.odata_value_swigregister
odata_value_swigregister(odata_value)

class odata_structured_value(odata_value):
    __swig_setmethods__ = {}
    for _s in [odata_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_structured_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_structured_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_structured_value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_odata_structured_value
    __del__ = lambda self : None;
    def properties(self): return _odata_client_python.odata_structured_value_properties(self)
    def set_properties(self, *args): return _odata_client_python.odata_structured_value_set_properties(self, *args)
    def has_property(self, *args): return _odata_client_python.odata_structured_value_has_property(self, *args)
    def get_property_value(self, *args): return _odata_client_python.odata_structured_value_get_property_value(self, *args)
    def set_value(self, *args): return _odata_client_python.odata_structured_value_set_value(self, *args)
    def remove(self, *args): return _odata_client_python.odata_structured_value_remove(self, *args)
    def get_edit_link(self): return _odata_client_python.odata_structured_value_get_edit_link(self)
odata_structured_value_swigregister = _odata_client_python.odata_structured_value_swigregister
odata_structured_value_swigregister(odata_structured_value)

class odata_collection_value(odata_value):
    __swig_setmethods__ = {}
    for _s in [odata_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_collection_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_collection_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_collection_value(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_collection_value(self, *args): return _odata_client_python.odata_collection_value_add_collection_value(self, *args)
    def get_collection_values(self): return _odata_client_python.odata_collection_value_get_collection_values(self)
    __swig_destroy__ = _odata_client_python.delete_odata_collection_value
    __del__ = lambda self : None;
odata_collection_value_swigregister = _odata_client_python.odata_collection_value_swigregister
odata_collection_value_swigregister(odata_collection_value)

class odata_entity_value(odata_structured_value):
    __swig_setmethods__ = {}
    for _s in [odata_structured_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_entity_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_structured_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_entity_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_entity_value(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_entity_key_string(self): return _odata_client_python.odata_entity_value_get_entity_key_string(self)
    __swig_destroy__ = _odata_client_python.delete_odata_entity_value
    __del__ = lambda self : None;
odata_entity_value_swigregister = _odata_client_python.odata_entity_value_swigregister
odata_entity_value_swigregister(odata_entity_value)

class odata_enum_value(odata_value):
    __swig_setmethods__ = {}
    for _s in [odata_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_enum_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_enum_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_enum_value(*args)
        try: self.this.append(this)
        except: self.this = this
    def to_string(self): return _odata_client_python.odata_enum_value_to_string(self)
    __swig_destroy__ = _odata_client_python.delete_odata_enum_value
    __del__ = lambda self : None;
odata_enum_value_swigregister = _odata_client_python.odata_enum_value_swigregister
odata_enum_value_swigregister(odata_enum_value)

class odata_complex_value(odata_structured_value):
    __swig_setmethods__ = {}
    for _s in [odata_structured_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_complex_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_structured_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_complex_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_complex_value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_odata_complex_value
    __del__ = lambda self : None;
odata_complex_value_swigregister = _odata_client_python.odata_complex_value_swigregister
odata_complex_value_swigregister(odata_complex_value)

class odata_primitive_value(odata_value):
    __swig_setmethods__ = {}
    for _s in [odata_value]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_primitive_value, name, value)
    __swig_getmethods__ = {}
    for _s in [odata_value]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, odata_primitive_value, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_primitive_value(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["make_primitive_value"] = lambda x: _odata_client_python.odata_primitive_value_make_primitive_value
    if _newclass:make_primitive_value = staticmethod(_odata_client_python.odata_primitive_value_make_primitive_value)
    def to_string(self): return _odata_client_python.odata_primitive_value_to_string(self)
    def get_primitive_type(self): return _odata_client_python.odata_primitive_value_get_primitive_type(self)
    __swig_destroy__ = _odata_client_python.delete_odata_primitive_value
    __del__ = lambda self : None;
odata_primitive_value_swigregister = _odata_client_python.odata_primitive_value_swigregister
odata_primitive_value_swigregister(odata_primitive_value)

def odata_primitive_value_make_primitive_value(*args):
  return _odata_client_python.odata_primitive_value_make_primitive_value(*args)
odata_primitive_value_make_primitive_value = _odata_client_python.odata_primitive_value_make_primitive_value

class odata_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_parameter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _odata_client_python.odata_parameter_get_name(self)
    def set_name(self, *args): return _odata_client_python.odata_parameter_set_name(self, *args)
    def get_value(self): return _odata_client_python.odata_parameter_get_value(self)
    def set_value(self, *args): return _odata_client_python.odata_parameter_set_value(self, *args)
    __swig_destroy__ = _odata_client_python.delete_odata_parameter
    __del__ = lambda self : None;
odata_parameter_swigregister = _odata_client_python.odata_parameter_swigregister
odata_parameter_swigregister(odata_parameter)

class odata_entity_model_builder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_entity_model_builder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_entity_model_builder, name)
    __repr__ = _swig_repr
    __swig_getmethods__["compute_edit_link"] = lambda x: _odata_client_python.odata_entity_model_builder_compute_edit_link
    if _newclass:compute_edit_link = staticmethod(_odata_client_python.odata_entity_model_builder_compute_edit_link)
    __swig_getmethods__["get_entity_key_value_string"] = lambda x: _odata_client_python.odata_entity_model_builder_get_entity_key_value_string
    if _newclass:get_entity_key_value_string = staticmethod(_odata_client_python.odata_entity_model_builder_get_entity_key_value_string)
    def __init__(self): 
        this = _odata_client_python.new_odata_entity_model_builder()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_odata_entity_model_builder
    __del__ = lambda self : None;
odata_entity_model_builder_swigregister = _odata_client_python.odata_entity_model_builder_swigregister
odata_entity_model_builder_swigregister(odata_entity_model_builder)

def odata_entity_model_builder_compute_edit_link(*args):
  return _odata_client_python.odata_entity_model_builder_compute_edit_link(*args)
odata_entity_model_builder_compute_edit_link = _odata_client_python.odata_entity_model_builder_compute_edit_link

def odata_entity_model_builder_get_entity_key_value_string(*args):
  return _odata_client_python.odata_entity_model_builder_get_entity_key_value_string(*args)
odata_entity_model_builder_get_entity_key_value_string = _odata_client_python.odata_entity_model_builder_get_entity_key_value_string

HTTP_GET = _odata_client_python.HTTP_GET
HTTP_POST = _odata_client_python.HTTP_POST
HTTP_PATCH = _odata_client_python.HTTP_PATCH
HTTP_DELETE = _odata_client_python.HTTP_DELETE
HTTP_PUT = _odata_client_python.HTTP_PUT
class service_exception(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, service_exception, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, service_exception, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_service_exception(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_service_exception
    __del__ = lambda self : None;
    def what(self): return _odata_client_python.service_exception_what(self)
service_exception_swigregister = _odata_client_python.service_exception_swigregister
service_exception_swigregister(service_exception)

class odata_client_credential(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_client_credential, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_client_credential, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_client_credential(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_username(self): return _odata_client_python.odata_client_credential_get_username(self)
    def get_password(self): return _odata_client_python.odata_client_credential_get_password(self)
    __swig_destroy__ = _odata_client_python.delete_odata_client_credential
    __del__ = lambda self : None;
odata_client_credential_swigregister = _odata_client_python.odata_client_credential_swigregister
odata_client_credential_swigregister(odata_client_credential)

class client_options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, client_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, client_options, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _odata_client_python.new_client_options()
        try: self.this.append(this)
        except: self.this = this
    def prefer_json(self, *args): return _odata_client_python.client_options_prefer_json(self, *args)
    def prefer_atom(self): return _odata_client_python.client_options_prefer_atom(self)
    def do_verb_tunneling(self): return _odata_client_python.client_options_do_verb_tunneling(self)
    def enable_client_credential(self, *args): return _odata_client_python.client_options_enable_client_credential(self, *args)
    def disable_client_credential(self): return _odata_client_python.client_options_disable_client_credential(self)
    def get_credential_setting(self): return _odata_client_python.client_options_get_credential_setting(self)
    __swig_destroy__ = _odata_client_python.delete_client_options
    __del__ = lambda self : None;
client_options_swigregister = _odata_client_python.client_options_swigregister
client_options_swigregister(client_options)

class odata_client(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, odata_client, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, odata_client, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _odata_client_python.new_odata_client(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_service_root_url(self): return _odata_client_python.odata_client_get_service_root_url(self)
    def get_relative_path(self, *args): return _odata_client_python.odata_client_get_relative_path(self, *args)
    def get_model(self): return _odata_client_python.odata_client_get_model(self)
    def get_entities(self, *args): return _odata_client_python.odata_client_get_entities(self, *args)
    def create_entity(self, *args): return _odata_client_python.odata_client_create_entity(self, *args)
    def patch_entity(self, *args): return _odata_client_python.odata_client_patch_entity(self, *args)
    def put_entity(self, *args): return _odata_client_python.odata_client_put_entity(self, *args)
    def delete_entity(self, *args): return _odata_client_python.odata_client_delete_entity(self, *args)
    def add_reference(self, *args): return _odata_client_python.odata_client_add_reference(self, *args)
    def remove_reference(self, *args): return _odata_client_python.odata_client_remove_reference(self, *args)
    def update_reference(self, *args): return _odata_client_python.odata_client_update_reference(self, *args)
    def get_data_from_server(self, *args): return _odata_client_python.odata_client_get_data_from_server(self, *args)
    def get_paged_data_from_server(self, *args): return _odata_client_python.odata_client_get_paged_data_from_server(self, *args)
    def send_data_to_server(self, *args): return _odata_client_python.odata_client_send_data_to_server(self, *args)
    __swig_destroy__ = _odata_client_python.delete_odata_client
    __del__ = lambda self : None;
odata_client_swigregister = _odata_client_python.odata_client_swigregister
odata_client_swigregister(odata_client)

class task_edm_model(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, task_edm_model, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, task_edm_model, name)
    __repr__ = _swig_repr
    def get(self): return _odata_client_python.task_edm_model_get(self)
    def __init__(self): 
        this = _odata_client_python.new_task_edm_model()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_task_edm_model
    __del__ = lambda self : None;
task_edm_model_swigregister = _odata_client_python.task_edm_model_swigregister
task_edm_model_swigregister(task_edm_model)

class task_odata_entity_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, task_odata_entity_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, task_odata_entity_values, name)
    __repr__ = _swig_repr
    def get(self): return _odata_client_python.task_odata_entity_values_get(self)
    def __init__(self): 
        this = _odata_client_python.new_task_odata_entity_values()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_task_odata_entity_values
    __del__ = lambda self : None;
task_odata_entity_values_swigregister = _odata_client_python.task_odata_entity_values_swigregister
task_odata_entity_values_swigregister(task_odata_entity_values)

class task_odata_values(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, task_odata_values, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, task_odata_values, name)
    __repr__ = _swig_repr
    def get(self): return _odata_client_python.task_odata_values_get(self)
    def __init__(self): 
        this = _odata_client_python.new_task_odata_values()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_task_odata_values
    __del__ = lambda self : None;
task_odata_values_swigregister = _odata_client_python.task_odata_values_swigregister
task_odata_values_swigregister(task_odata_values)

class task_http_status_code(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, task_http_status_code, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, task_http_status_code, name)
    __repr__ = _swig_repr
    def get(self): return _odata_client_python.task_http_status_code_get(self)
    def __init__(self): 
        this = _odata_client_python.new_task_http_status_code()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _odata_client_python.delete_task_http_status_code
    __del__ = lambda self : None;
task_http_status_code_swigregister = _odata_client_python.task_http_status_code_swigregister
task_http_status_code_swigregister(task_http_status_code)

class vector_string_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string_t, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_string_t_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_string_t___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_string_t___bool__(self)
    def __len__(self): return _odata_client_python.vector_string_t___len__(self)
    def pop(self): return _odata_client_python.vector_string_t_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_string_t___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_string_t___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_string_t___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_string_t___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_string_t___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_string_t___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_string_t_append(self, *args)
    def empty(self): return _odata_client_python.vector_string_t_empty(self)
    def size(self): return _odata_client_python.vector_string_t_size(self)
    def clear(self): return _odata_client_python.vector_string_t_clear(self)
    def swap(self, *args): return _odata_client_python.vector_string_t_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_string_t_get_allocator(self)
    def begin(self): return _odata_client_python.vector_string_t_begin(self)
    def end(self): return _odata_client_python.vector_string_t_end(self)
    def rbegin(self): return _odata_client_python.vector_string_t_rbegin(self)
    def rend(self): return _odata_client_python.vector_string_t_rend(self)
    def pop_back(self): return _odata_client_python.vector_string_t_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_string_t_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_string_t(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_string_t_push_back(self, *args)
    def front(self): return _odata_client_python.vector_string_t_front(self)
    def back(self): return _odata_client_python.vector_string_t_back(self)
    def assign(self, *args): return _odata_client_python.vector_string_t_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_string_t_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_string_t_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_string_t_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_string_t_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_string_t
    __del__ = lambda self : None;
vector_string_t_swigregister = _odata_client_python.vector_string_t_swigregister
vector_string_t_swigregister(vector_string_t)

class vector_odata_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_odata_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_odata_value, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_odata_value_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_odata_value___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_odata_value___bool__(self)
    def __len__(self): return _odata_client_python.vector_odata_value___len__(self)
    def pop(self): return _odata_client_python.vector_odata_value_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_odata_value___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_odata_value___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_odata_value___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_odata_value___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_odata_value___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_odata_value___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_odata_value_append(self, *args)
    def empty(self): return _odata_client_python.vector_odata_value_empty(self)
    def size(self): return _odata_client_python.vector_odata_value_size(self)
    def clear(self): return _odata_client_python.vector_odata_value_clear(self)
    def swap(self, *args): return _odata_client_python.vector_odata_value_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_odata_value_get_allocator(self)
    def begin(self): return _odata_client_python.vector_odata_value_begin(self)
    def end(self): return _odata_client_python.vector_odata_value_end(self)
    def rbegin(self): return _odata_client_python.vector_odata_value_rbegin(self)
    def rend(self): return _odata_client_python.vector_odata_value_rend(self)
    def pop_back(self): return _odata_client_python.vector_odata_value_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_odata_value_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_odata_value(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_odata_value_push_back(self, *args)
    def front(self): return _odata_client_python.vector_odata_value_front(self)
    def back(self): return _odata_client_python.vector_odata_value_back(self)
    def assign(self, *args): return _odata_client_python.vector_odata_value_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_odata_value_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_odata_value_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_odata_value_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_odata_value_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_odata_value
    __del__ = lambda self : None;
vector_odata_value_swigregister = _odata_client_python.vector_odata_value_swigregister
vector_odata_value_swigregister(vector_odata_value)

class vector_odata_entity_value(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_odata_entity_value, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_odata_entity_value, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_odata_entity_value_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_odata_entity_value___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_odata_entity_value___bool__(self)
    def __len__(self): return _odata_client_python.vector_odata_entity_value___len__(self)
    def pop(self): return _odata_client_python.vector_odata_entity_value_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_odata_entity_value___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_odata_entity_value___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_odata_entity_value___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_odata_entity_value___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_odata_entity_value___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_odata_entity_value___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_odata_entity_value_append(self, *args)
    def empty(self): return _odata_client_python.vector_odata_entity_value_empty(self)
    def size(self): return _odata_client_python.vector_odata_entity_value_size(self)
    def clear(self): return _odata_client_python.vector_odata_entity_value_clear(self)
    def swap(self, *args): return _odata_client_python.vector_odata_entity_value_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_odata_entity_value_get_allocator(self)
    def begin(self): return _odata_client_python.vector_odata_entity_value_begin(self)
    def end(self): return _odata_client_python.vector_odata_entity_value_end(self)
    def rbegin(self): return _odata_client_python.vector_odata_entity_value_rbegin(self)
    def rend(self): return _odata_client_python.vector_odata_entity_value_rend(self)
    def pop_back(self): return _odata_client_python.vector_odata_entity_value_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_odata_entity_value_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_odata_entity_value(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_odata_entity_value_push_back(self, *args)
    def front(self): return _odata_client_python.vector_odata_entity_value_front(self)
    def back(self): return _odata_client_python.vector_odata_entity_value_back(self)
    def assign(self, *args): return _odata_client_python.vector_odata_entity_value_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_odata_entity_value_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_odata_entity_value_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_odata_entity_value_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_odata_entity_value_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_odata_entity_value
    __del__ = lambda self : None;
vector_odata_entity_value_swigregister = _odata_client_python.vector_odata_entity_value_swigregister
vector_odata_entity_value_swigregister(vector_odata_entity_value)

class vector_odata_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_odata_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_odata_parameter, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_odata_parameter_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_odata_parameter___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_odata_parameter___bool__(self)
    def __len__(self): return _odata_client_python.vector_odata_parameter___len__(self)
    def pop(self): return _odata_client_python.vector_odata_parameter_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_odata_parameter___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_odata_parameter___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_odata_parameter___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_odata_parameter___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_odata_parameter___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_odata_parameter___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_odata_parameter_append(self, *args)
    def empty(self): return _odata_client_python.vector_odata_parameter_empty(self)
    def size(self): return _odata_client_python.vector_odata_parameter_size(self)
    def clear(self): return _odata_client_python.vector_odata_parameter_clear(self)
    def swap(self, *args): return _odata_client_python.vector_odata_parameter_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_odata_parameter_get_allocator(self)
    def begin(self): return _odata_client_python.vector_odata_parameter_begin(self)
    def end(self): return _odata_client_python.vector_odata_parameter_end(self)
    def rbegin(self): return _odata_client_python.vector_odata_parameter_rbegin(self)
    def rend(self): return _odata_client_python.vector_odata_parameter_rend(self)
    def pop_back(self): return _odata_client_python.vector_odata_parameter_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_odata_parameter_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_odata_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_odata_parameter_push_back(self, *args)
    def front(self): return _odata_client_python.vector_odata_parameter_front(self)
    def back(self): return _odata_client_python.vector_odata_parameter_back(self)
    def assign(self, *args): return _odata_client_python.vector_odata_parameter_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_odata_parameter_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_odata_parameter_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_odata_parameter_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_odata_parameter_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_odata_parameter
    __del__ = lambda self : None;
vector_odata_parameter_swigregister = _odata_client_python.vector_odata_parameter_swigregister
vector_odata_parameter_swigregister(vector_odata_parameter)

class vector_edm_schema(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_schema, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_schema, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_schema_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_schema___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_schema___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_schema___len__(self)
    def pop(self): return _odata_client_python.vector_edm_schema_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_schema___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_schema___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_schema___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_schema___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_schema___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_schema___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_schema_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_schema_empty(self)
    def size(self): return _odata_client_python.vector_edm_schema_size(self)
    def clear(self): return _odata_client_python.vector_edm_schema_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_schema_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_schema_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_schema_begin(self)
    def end(self): return _odata_client_python.vector_edm_schema_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_schema_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_schema_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_schema_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_schema_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_schema(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_schema_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_schema_front(self)
    def back(self): return _odata_client_python.vector_edm_schema_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_schema_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_schema_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_schema_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_schema_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_schema_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_schema
    __del__ = lambda self : None;
vector_edm_schema_swigregister = _odata_client_python.vector_edm_schema_swigregister
vector_edm_schema_swigregister(vector_edm_schema)

class vector_edm_operation_parameter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_operation_parameter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_operation_parameter, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_operation_parameter_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_operation_parameter___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_operation_parameter___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_operation_parameter___len__(self)
    def pop(self): return _odata_client_python.vector_edm_operation_parameter_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_operation_parameter___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_operation_parameter___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_operation_parameter___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_operation_parameter___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_operation_parameter___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_operation_parameter___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_operation_parameter_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_operation_parameter_empty(self)
    def size(self): return _odata_client_python.vector_edm_operation_parameter_size(self)
    def clear(self): return _odata_client_python.vector_edm_operation_parameter_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_operation_parameter_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_operation_parameter_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_operation_parameter_begin(self)
    def end(self): return _odata_client_python.vector_edm_operation_parameter_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_operation_parameter_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_operation_parameter_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_operation_parameter_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_operation_parameter_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_operation_parameter(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_operation_parameter_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_operation_parameter_front(self)
    def back(self): return _odata_client_python.vector_edm_operation_parameter_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_operation_parameter_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_operation_parameter_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_operation_parameter_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_operation_parameter_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_operation_parameter_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_operation_parameter
    __del__ = lambda self : None;
vector_edm_operation_parameter_swigregister = _odata_client_python.vector_edm_operation_parameter_swigregister
vector_edm_operation_parameter_swigregister(vector_edm_operation_parameter)

class vector_edm_enum_member(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_enum_member, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_enum_member, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_enum_member_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_enum_member___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_enum_member___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_enum_member___len__(self)
    def pop(self): return _odata_client_python.vector_edm_enum_member_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_enum_member___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_enum_member___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_enum_member___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_enum_member___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_enum_member___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_enum_member___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_enum_member_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_enum_member_empty(self)
    def size(self): return _odata_client_python.vector_edm_enum_member_size(self)
    def clear(self): return _odata_client_python.vector_edm_enum_member_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_enum_member_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_enum_member_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_enum_member_begin(self)
    def end(self): return _odata_client_python.vector_edm_enum_member_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_enum_member_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_enum_member_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_enum_member_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_enum_member_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_enum_member(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_enum_member_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_enum_member_front(self)
    def back(self): return _odata_client_python.vector_edm_enum_member_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_enum_member_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_enum_member_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_enum_member_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_enum_member_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_enum_member_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_enum_member
    __del__ = lambda self : None;
vector_edm_enum_member_swigregister = _odata_client_python.vector_edm_enum_member_swigregister
vector_edm_enum_member_swigregister(vector_edm_enum_member)

class vector_edm_entity_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_entity_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_entity_type, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_entity_type_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_entity_type___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_entity_type___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_entity_type___len__(self)
    def pop(self): return _odata_client_python.vector_edm_entity_type_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_entity_type___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_entity_type___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_entity_type___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_entity_type___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_entity_type___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_entity_type___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_entity_type_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_entity_type_empty(self)
    def size(self): return _odata_client_python.vector_edm_entity_type_size(self)
    def clear(self): return _odata_client_python.vector_edm_entity_type_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_entity_type_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_entity_type_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_entity_type_begin(self)
    def end(self): return _odata_client_python.vector_edm_entity_type_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_entity_type_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_entity_type_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_entity_type_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_entity_type_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_entity_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_entity_type_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_entity_type_front(self)
    def back(self): return _odata_client_python.vector_edm_entity_type_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_entity_type_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_entity_type_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_entity_type_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_entity_type_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_entity_type_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_entity_type
    __del__ = lambda self : None;
vector_edm_entity_type_swigregister = _odata_client_python.vector_edm_entity_type_swigregister
vector_edm_entity_type_swigregister(vector_edm_entity_type)

class vector_edm_complex_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_complex_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_complex_type, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_complex_type_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_complex_type___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_complex_type___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_complex_type___len__(self)
    def pop(self): return _odata_client_python.vector_edm_complex_type_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_complex_type___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_complex_type___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_complex_type___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_complex_type___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_complex_type___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_complex_type___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_complex_type_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_complex_type_empty(self)
    def size(self): return _odata_client_python.vector_edm_complex_type_size(self)
    def clear(self): return _odata_client_python.vector_edm_complex_type_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_complex_type_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_complex_type_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_complex_type_begin(self)
    def end(self): return _odata_client_python.vector_edm_complex_type_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_complex_type_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_complex_type_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_complex_type_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_complex_type_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_complex_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_complex_type_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_complex_type_front(self)
    def back(self): return _odata_client_python.vector_edm_complex_type_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_complex_type_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_complex_type_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_complex_type_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_complex_type_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_complex_type_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_complex_type
    __del__ = lambda self : None;
vector_edm_complex_type_swigregister = _odata_client_python.vector_edm_complex_type_swigregister
vector_edm_complex_type_swigregister(vector_edm_complex_type)

class vector_edm_enum_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_enum_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_enum_type, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_enum_type_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_enum_type___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_enum_type___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_enum_type___len__(self)
    def pop(self): return _odata_client_python.vector_edm_enum_type_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_enum_type___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_enum_type___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_enum_type___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_enum_type___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_enum_type___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_enum_type___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_enum_type_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_enum_type_empty(self)
    def size(self): return _odata_client_python.vector_edm_enum_type_size(self)
    def clear(self): return _odata_client_python.vector_edm_enum_type_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_enum_type_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_enum_type_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_enum_type_begin(self)
    def end(self): return _odata_client_python.vector_edm_enum_type_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_enum_type_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_enum_type_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_enum_type_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_enum_type_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_enum_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_enum_type_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_enum_type_front(self)
    def back(self): return _odata_client_python.vector_edm_enum_type_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_enum_type_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_enum_type_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_enum_type_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_enum_type_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_enum_type_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_enum_type
    __del__ = lambda self : None;
vector_edm_enum_type_swigregister = _odata_client_python.vector_edm_enum_type_swigregister
vector_edm_enum_type_swigregister(vector_edm_enum_type)

class vector_edm_operation_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_operation_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_operation_type, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_operation_type_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_operation_type___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_operation_type___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_operation_type___len__(self)
    def pop(self): return _odata_client_python.vector_edm_operation_type_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_operation_type___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_operation_type___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_operation_type___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_operation_type___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_operation_type___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_operation_type___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_operation_type_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_operation_type_empty(self)
    def size(self): return _odata_client_python.vector_edm_operation_type_size(self)
    def clear(self): return _odata_client_python.vector_edm_operation_type_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_operation_type_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_operation_type_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_operation_type_begin(self)
    def end(self): return _odata_client_python.vector_edm_operation_type_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_operation_type_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_operation_type_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_operation_type_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_operation_type_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_operation_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_operation_type_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_operation_type_front(self)
    def back(self): return _odata_client_python.vector_edm_operation_type_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_operation_type_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_operation_type_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_operation_type_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_operation_type_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_operation_type_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_operation_type
    __del__ = lambda self : None;
vector_edm_operation_type_swigregister = _odata_client_python.vector_edm_operation_type_swigregister
vector_edm_operation_type_swigregister(vector_edm_operation_type)

class vector_edm_entity_container(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_entity_container, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_entity_container, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_entity_container_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_entity_container___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_entity_container___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_entity_container___len__(self)
    def pop(self): return _odata_client_python.vector_edm_entity_container_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_entity_container___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_entity_container___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_entity_container___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_entity_container___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_entity_container___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_entity_container___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_entity_container_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_entity_container_empty(self)
    def size(self): return _odata_client_python.vector_edm_entity_container_size(self)
    def clear(self): return _odata_client_python.vector_edm_entity_container_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_entity_container_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_entity_container_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_entity_container_begin(self)
    def end(self): return _odata_client_python.vector_edm_entity_container_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_entity_container_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_entity_container_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_entity_container_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_entity_container_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_entity_container(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_entity_container_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_entity_container_front(self)
    def back(self): return _odata_client_python.vector_edm_entity_container_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_entity_container_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_entity_container_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_entity_container_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_entity_container_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_entity_container_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_entity_container
    __del__ = lambda self : None;
vector_edm_entity_container_swigregister = _odata_client_python.vector_edm_entity_container_swigregister
vector_edm_entity_container_swigregister(vector_edm_entity_container)

class vector_edm_property_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_property_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_property_type, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_property_type_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_property_type___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_property_type___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_property_type___len__(self)
    def pop(self): return _odata_client_python.vector_edm_property_type_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_property_type___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_property_type___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_property_type___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_property_type___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_property_type___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_property_type___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_property_type_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_property_type_empty(self)
    def size(self): return _odata_client_python.vector_edm_property_type_size(self)
    def clear(self): return _odata_client_python.vector_edm_property_type_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_property_type_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_property_type_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_property_type_begin(self)
    def end(self): return _odata_client_python.vector_edm_property_type_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_property_type_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_property_type_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_property_type_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_property_type_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_property_type(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_property_type_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_property_type_front(self)
    def back(self): return _odata_client_python.vector_edm_property_type_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_property_type_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_property_type_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_property_type_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_property_type_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_property_type_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_property_type
    __del__ = lambda self : None;
vector_edm_property_type_swigregister = _odata_client_python.vector_edm_property_type_swigregister
vector_edm_property_type_swigregister(vector_edm_property_type)

class vector_edm_entity_set(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_entity_set, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_entity_set, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_entity_set_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_entity_set___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_entity_set___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_entity_set___len__(self)
    def pop(self): return _odata_client_python.vector_edm_entity_set_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_entity_set___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_entity_set___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_entity_set___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_entity_set___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_entity_set___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_entity_set___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_entity_set_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_entity_set_empty(self)
    def size(self): return _odata_client_python.vector_edm_entity_set_size(self)
    def clear(self): return _odata_client_python.vector_edm_entity_set_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_entity_set_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_entity_set_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_entity_set_begin(self)
    def end(self): return _odata_client_python.vector_edm_entity_set_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_entity_set_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_entity_set_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_entity_set_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_entity_set_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_entity_set(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_entity_set_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_entity_set_front(self)
    def back(self): return _odata_client_python.vector_edm_entity_set_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_entity_set_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_entity_set_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_entity_set_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_entity_set_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_entity_set_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_entity_set
    __del__ = lambda self : None;
vector_edm_entity_set_swigregister = _odata_client_python.vector_edm_entity_set_swigregister
vector_edm_entity_set_swigregister(vector_edm_entity_set)

class vector_edm_singleton(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_singleton, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_singleton, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_singleton_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_singleton___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_singleton___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_singleton___len__(self)
    def pop(self): return _odata_client_python.vector_edm_singleton_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_singleton___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_singleton___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_singleton___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_singleton___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_singleton___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_singleton___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_singleton_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_singleton_empty(self)
    def size(self): return _odata_client_python.vector_edm_singleton_size(self)
    def clear(self): return _odata_client_python.vector_edm_singleton_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_singleton_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_singleton_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_singleton_begin(self)
    def end(self): return _odata_client_python.vector_edm_singleton_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_singleton_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_singleton_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_singleton_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_singleton_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_singleton(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_singleton_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_singleton_front(self)
    def back(self): return _odata_client_python.vector_edm_singleton_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_singleton_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_singleton_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_singleton_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_singleton_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_singleton_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_singleton
    __del__ = lambda self : None;
vector_edm_singleton_swigregister = _odata_client_python.vector_edm_singleton_swigregister
vector_edm_singleton_swigregister(vector_edm_singleton)

class vector_edm_operation_import(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_edm_operation_import, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_edm_operation_import, name)
    __repr__ = _swig_repr
    def iterator(self): return _odata_client_python.vector_edm_operation_import_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _odata_client_python.vector_edm_operation_import___nonzero__(self)
    def __bool__(self): return _odata_client_python.vector_edm_operation_import___bool__(self)
    def __len__(self): return _odata_client_python.vector_edm_operation_import___len__(self)
    def pop(self): return _odata_client_python.vector_edm_operation_import_pop(self)
    def __getslice__(self, *args): return _odata_client_python.vector_edm_operation_import___getslice__(self, *args)
    def __setslice__(self, *args): return _odata_client_python.vector_edm_operation_import___setslice__(self, *args)
    def __delslice__(self, *args): return _odata_client_python.vector_edm_operation_import___delslice__(self, *args)
    def __delitem__(self, *args): return _odata_client_python.vector_edm_operation_import___delitem__(self, *args)
    def __getitem__(self, *args): return _odata_client_python.vector_edm_operation_import___getitem__(self, *args)
    def __setitem__(self, *args): return _odata_client_python.vector_edm_operation_import___setitem__(self, *args)
    def append(self, *args): return _odata_client_python.vector_edm_operation_import_append(self, *args)
    def empty(self): return _odata_client_python.vector_edm_operation_import_empty(self)
    def size(self): return _odata_client_python.vector_edm_operation_import_size(self)
    def clear(self): return _odata_client_python.vector_edm_operation_import_clear(self)
    def swap(self, *args): return _odata_client_python.vector_edm_operation_import_swap(self, *args)
    def get_allocator(self): return _odata_client_python.vector_edm_operation_import_get_allocator(self)
    def begin(self): return _odata_client_python.vector_edm_operation_import_begin(self)
    def end(self): return _odata_client_python.vector_edm_operation_import_end(self)
    def rbegin(self): return _odata_client_python.vector_edm_operation_import_rbegin(self)
    def rend(self): return _odata_client_python.vector_edm_operation_import_rend(self)
    def pop_back(self): return _odata_client_python.vector_edm_operation_import_pop_back(self)
    def erase(self, *args): return _odata_client_python.vector_edm_operation_import_erase(self, *args)
    def __init__(self, *args): 
        this = _odata_client_python.new_vector_edm_operation_import(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _odata_client_python.vector_edm_operation_import_push_back(self, *args)
    def front(self): return _odata_client_python.vector_edm_operation_import_front(self)
    def back(self): return _odata_client_python.vector_edm_operation_import_back(self)
    def assign(self, *args): return _odata_client_python.vector_edm_operation_import_assign(self, *args)
    def resize(self, *args): return _odata_client_python.vector_edm_operation_import_resize(self, *args)
    def insert(self, *args): return _odata_client_python.vector_edm_operation_import_insert(self, *args)
    def reserve(self, *args): return _odata_client_python.vector_edm_operation_import_reserve(self, *args)
    def capacity(self): return _odata_client_python.vector_edm_operation_import_capacity(self)
    __swig_destroy__ = _odata_client_python.delete_vector_edm_operation_import
    __del__ = lambda self : None;
vector_edm_operation_import_swigregister = _odata_client_python.vector_edm_operation_import_swigregister
vector_edm_operation_import_swigregister(vector_edm_operation_import)


def to_primitive_value(*args):
  return _odata_client_python.to_primitive_value(*args)
to_primitive_value = _odata_client_python.to_primitive_value

def to_collection_value(*args):
  return _odata_client_python.to_collection_value(*args)
to_collection_value = _odata_client_python.to_collection_value

def to_complex_value(*args):
  return _odata_client_python.to_complex_value(*args)
to_complex_value = _odata_client_python.to_complex_value

def to_entity_value(*args):
  return _odata_client_python.to_entity_value(*args)
to_entity_value = _odata_client_python.to_entity_value

def to_enum_value(*args):
  return _odata_client_python.to_enum_value(*args)
to_enum_value = _odata_client_python.to_enum_value

def to_primitive_type(*args):
  return _odata_client_python.to_primitive_type(*args)
to_primitive_type = _odata_client_python.to_primitive_type

def to_navigation_type(*args):
  return _odata_client_python.to_navigation_type(*args)
to_navigation_type = _odata_client_python.to_navigation_type

def to_collection_type(*args):
  return _odata_client_python.to_collection_type(*args)
to_collection_type = _odata_client_python.to_collection_type

def to_entity_type(*args):
  return _odata_client_python.to_entity_type(*args)
to_entity_type = _odata_client_python.to_entity_type

def to_complex_type(*args):
  return _odata_client_python.to_complex_type(*args)
to_complex_type = _odata_client_python.to_complex_type

def is_nullptr(*args):
  return _odata_client_python.is_nullptr(*args)
is_nullptr = _odata_client_python.is_nullptr

def to_duration(*args):
  return _odata_client_python.to_duration(*args)
to_duration = _odata_client_python.to_duration
# This file is compatible with both classic and new-style classes.


